// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String?
  name          String?
  image         String?
  phoneNumber   String?
  phoneVerified Boolean   @default(false)
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Password reset
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  
  // GDPR Compliance
  consentGiven         Boolean   @default(false)
  consentTimestamp     DateTime?
  lastLogin            DateTime?
  dataExportRequested  DateTime?
  deletionRequested    DateTime?

  // Relations
  profile               Profile?
  subscription          Subscription?
  conversations         Conversation[]
  memories              Memory[]
  activities            Activity[]
  payments              Payment[]
  conversionEvents      ConversionEvent[]
  personalityTestResult PersonalityTestResult?

  // Auth
  accounts Account[]
  sessions Session[]
  phoneVerifications PhoneVerification[]
  devices Device[]
  auditLogs AuditLog[]
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Basic Info
  displayName String?
  avatar      String?
  bio         String?
  timezone    String   @default("UTC")
  dateOfBirth DateTime?

  // Personality
  personalityTest   Json? // Test answers
  archetype         String? // Calculated archetype
  personalityScores Json? // Dimension scores

  // Companion
  companionName       String  @default("Luna")
  companionAvatar     String?
  companionBackstory  String?
  companionVoice      String  @default("alloy")

  // Preferences
  preferredTone       String   @default("balanced")
  preferredTopics     String[]
  conversationStyle   String   @default("casual")
  creativityLevel     Int      @default(50)
  emotionalDepth      Int      @default(50)
  voiceEnabled        Boolean  @default(false)
  autoPlayVoice       Boolean  @default(false)
  voiceSpeed          Float    @default(1.0)

  // Relationship
  relationshipStage   String   @default("new_friend")
  trustLevel          Int      @default(0)
  interactionCount    Int      @default(0)
  lastInteraction     DateTime?
  milestones          Json?    // Achieved milestones
  significantMemories Json[]   // Important conversation moments

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Subscription & Billing
model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?  @unique
  stripePriceId        String?
  
  plan                 String   @default("free") // free, basic, premium, ultimate
  status               String   @default("active") // active, cancelled, past_due, unpaid
  
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelledAt          DateTime?
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

// Conversations
model Conversation {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title     String?
  messages  Message[]
  archived  Boolean   @default(false)
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@index([userId])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  role           String        // user, assistant, system
  content        String
  metadata       Json?         // Store emotions, context, etc.
  audioUrl       String?       // For voice messages
  imageUrl       String?       // For photo sharing
  
  createdAt      DateTime      @default(now())
  
  @@index([conversationId])
}

// Memory System
model Memory {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type         String    // fact, preference, emotion, experience
  content      String
  context      String?
  importance   Float     @default(0.5)
  embedding    Float[]   // Vector embedding for similarity search
  
  createdAt    DateTime  @default(now())
  lastAccessed DateTime  @default(now())
  accessCount  Int       @default(0)
  
  @@index([userId])
  @@index([type])
  @@index([importance])
}

// Analytics & Tracking
model Activity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      String   // login, message, voice_play, photo_share, etc.
  metadata  Json?
  
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model ConversionEvent {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  event     String   // signup, subscription, upgrade, etc.
  source    String?  // utm_source
  medium    String?  // utm_medium
  campaign  String?  // utm_campaign
  metadata  Json?
  
  createdAt DateTime @default(now())
  
  @@index([event])
  @@index([createdAt])
}

// Payment Records
model Payment {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  stripePaymentId    String   @unique
  amount             Int      // in cents
  currency           String   @default("usd")
  status             String   // succeeded, pending, failed
  
  createdAt          DateTime @default(now())
  
  @@index([userId])
  @@index([status])
}

// Personality Test Results
model PersonalityTestResult {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  answers        Json     // All test answers
  scores         Json     // Calculated scores
  archetype      String   // Primary archetype
  
  createdAt      DateTime @default(now())
  completedAt    DateTime @default(now())
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// GDPR Consent Records
model ConsentRecord {
  id           String   @id @default(cuid())
  userId       String
  consentType  String
  granted      Boolean
  timestamp    DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  version      String
  
  @@index([userId, consentType])
  @@index([timestamp])
}

// Phone Verification
model PhoneVerification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  phoneNumber String
  code        String
  verified    Boolean  @default(false)
  expiresAt   DateTime
  
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([phoneNumber])
  @@index([code])
}

model Device {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  deviceId     String   // Unique device identifier (fingerprint)
  name         String   // User-friendly name
  type         String   // desktop, mobile, tablet
  browser      String   // Chrome, Safari, Firefox, etc.
  os           String   // Windows, macOS, iOS, Android, etc.
  
  lastActiveAt DateTime @default(now())
  lastIp       String?
  location     String?  // City, Country
  
  trusted      Boolean  @default(false)
  createdAt    DateTime @default(now())
  
  @@unique([userId, deviceId])
  @@index([userId])
  @@index([lastActiveAt])
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  action       String   // Enum value from AuditAction
  resourceType String?  // Type of resource (e.g., "character", "subscription")
  resourceId   String?  // ID of the resource
  
  metadata     Json     @default("{}")  // Additional context
  ipAddress    String?
  userAgent    String?
  
  success      Boolean  @default(true)
  errorMessage String?
  
  createdAt    DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([resourceType, resourceId])
}

enum UserRole {
  USER
  ADMIN
}